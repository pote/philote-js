!function(t,e,n){"undefined"!=typeof module&&module.exports?module.exports=n():"function"==typeof define&&define.amd?define(n):e[t]=n()}("Philote",this,function(){"use strict";function t(t,e){return function(){return e.apply(t,arguments)}}function e(t){var e=JSON.parse(t.data),n=this.handlers[e.channel];if(n&&0!==n.length)for(var o=0;o<n.length;++o)n[o](e.data,e)}var n="https:"===location.protocol?"wss:":"ws:",o={server:n+"//ws.philote.io/",auth:{endpoint:"/philote/auth",transport:"ajax",params:{},headers:{}},error:function(){}},s=function(t){if(this===this.window)throw new Error("Need to instantiate via `new Philote`");var t=t||{},e=t.auth||{};this.options={server:t.server||o.server,auth:{endpoint:e.endpoint||o.auth.endpoint,transport:e.transport||o.auth.transport,params:e.params||o.auth.params,headers:e.headers||o.auth.headers},error:t.error||o.error},this.handlers={},this.sendQueue=[]};return s.protocol=n,s.prototype.connect=function(n,o){var s=this.options.server+"?token="+encodeURIComponent(n);this.socket=new Websocket(s),this.socket.onopen=t(this,function(){for("function"==typeof o&&o();this.sendQueue.length>0;)this.publish.apply(this,this.sendQueue.shift())}),this.socket.onmessage=t(this,e)},s.prototype.disconnect=function(){this.socket&&this.socket.close()},s.prototype.subscribe=function(){console.log("Unimplemented yet...")},s.prototype.unsubscribe=function(){console.log("Unimplemented yet...")},s.prototype.on=function(t,e){if("function"!=typeof e)throw new Error("The callback must be a function");this.handlers[t]=this.handlers[t]||[],this.handlers[t].push(e)},s.prototype.publish=function(t,e){if(this.socket&&0!==this.socket.readyState){if(1===this.socket.readyState){var n=JSON.stringify({channel:t,data:e});this.socket.send(n)}else if(this.socket.readyState>1)throw new Error("Can't publish data after disconnecting!")}else this.sendQueue.push([t,e])},s.VERSION="0.1.0",s});